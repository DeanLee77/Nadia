/*

Preserves orignal formatting

 */
/* declarations can exist inside atrules */
@font-face {
  font-family: 'Test font';
}

/* comment before rule */
body/* comment after rule name */{
    /* comment before decl */
    padding /*  comment after prop */ : /*  comment before val */ 0 /*  comment after val */ 3px /* another comment */ 2px /* one more */ 1px /* last one*/;
    /* comment after decl */

    margin:
        0 /*top*/
        3px /*right
        multi-line
        comment
        */
        2px /*bottom*/
        1px /*left*/;

    border-right/*  comment after prop */: none;
}

/* empty options forces defaults */
/* should not process urls - default */
@import url("rtl-right-east.css");
div:before { content: "ABC";} div:after { content: "A";}

.demo-next, .demo-Next, .demo-NEXT { content: 'p'; }
.demo-prev, .demo-Prev, .demo-PREV { content: 'n'; }


div {
  text-align: left;
  padding: 10px;
}
.sample {
    text-align: left;
}
.right { display:inline;}
/*rtl:begin:options:{"autoRename":true, "greedy": true}*/
.bleft { display:inline;}
/*rtl:end:options*/
.brighter { display:inline;}

/* auto rename only if a pair exists */

/* The following should not be renamed */
.ltr{ display: inline-flex;}

/* But these should */
.left{ display: inline-flex;}
.right { display: block;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBQ0gsMkNBQTJDO0FBQzNDO0VBQ0UseUJBQXlCO0NBQzFCOztBQUVELHlCQUF5QjtBQUN6QjtJQUNJLHlCQUF5QjtJQUN6Qix3SkFBd0o7SUFDeEosd0JBQXdCOztJQUV4Qjs7Ozs7OztxQkFPaUI7O0lBRWpCLDRDQUEyQztDQUM5Qzs7QUFFRCxtQ0FBbUM7QUFFbkMsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQXdDbEMsYUFBYSxlQUFhLENBQUMsQ0FBQyxZQUFZLGFBQWUsQ0FBQzs7QUFFeEQscUNBQXFDLGFBQWEsRUFBRTtBQUNwRCxxQ0FBcUMsYUFBYSxFQUFFOzs7QUFZcEQ7RUFHRSxpQkFBa0I7RUFDbEIsY0FBYztDQUNmO0FBR0Q7SUFDSSxpQkFBaUI7Q0FDcEI7QUFLRCxTQUFTLGVBQWUsQ0FBQztBQUN6Qix5REFBeUQ7QUFDekQsU0FBVSxlQUFlLENBQUM7QUFDMUIsbUJBQW1CO0FBQ25CLFlBQVksZUFBZSxDQUFDOztBQUc1Qix1Q0FBdUM7O0FBSXZDLHlDQUF5QztBQUN6QyxNQUFNLHFCQUFxQixDQUFDOztBQUU1QixzQkFBc0I7QUFDdEIsT0FBUSxxQkFBcUIsQ0FBQztBQUM5QixTQUFRLGVBQWUsQ0FBQyIsImZpbGUiOiJpbnB1dC5ydGwuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblxuUHJlc2VydmVzIG9yaWduYWwgZm9ybWF0dGluZ1xuXG4gKi9cbi8qIGRlY2xhcmF0aW9ucyBjYW4gZXhpc3QgaW5zaWRlIGF0cnVsZXMgKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ1Rlc3QgZm9udCc7XG59XG5cbi8qIGNvbW1lbnQgYmVmb3JlIHJ1bGUgKi9cbmJvZHkvKiBjb21tZW50IGFmdGVyIHJ1bGUgbmFtZSAqL3tcbiAgICAvKiBjb21tZW50IGJlZm9yZSBkZWNsICovXG4gICAgcGFkZGluZyAvKiAgY29tbWVudCBhZnRlciBwcm9wICovIDogLyogIGNvbW1lbnQgYmVmb3JlIHZhbCAqLyAwIC8qICBjb21tZW50IGFmdGVyIHZhbCAqLyAxcHggLyogYW5vdGhlciBjb21tZW50ICovIDJweCAvKiBvbmUgbW9yZSAqLyAzcHggLyogbGFzdCBvbmUqLztcbiAgICAvKiBjb21tZW50IGFmdGVyIGRlY2wgKi9cblxuICAgIG1hcmdpbjpcbiAgICAgICAgMCAvKnRvcCovXG4gICAgICAgIDFweCAvKnJpZ2h0XG4gICAgICAgIG11bHRpLWxpbmVcbiAgICAgICAgY29tbWVudFxuICAgICAgICAqL1xuICAgICAgICAycHggLypib3R0b20qL1xuICAgICAgICAzcHggLypsZWZ0Ki87XG5cbiAgICBib3JkZXItbGVmdC8qICBjb21tZW50IGFmdGVyIHByb3AgKi86IG5vbmU7XG59XG5cbi8qIGVtcHR5IG9wdGlvbnMgZm9yY2VzIGRlZmF1bHRzICovXG4vKnJ0bDpiZWdpbjpvcHRpb25zOiB7fSovXG4vKiBzaG91bGQgbm90IHByb2Nlc3MgdXJscyAtIGRlZmF1bHQgKi9cbkBpbXBvcnQgdXJsKFwicnRsLXJpZ2h0LWVhc3QuY3NzXCIpO1xuLypydGw6ZW5kOm9wdGlvbnMqL1xuXG4vKnJ0bDpiZWdpbjpjb25maWc6XG57XG4gICAgXCJvcHRpb25zXCI6e1xuICAgICAgICBcImF1dG9SZW5hbWVcIjogdHJ1ZSxcbiAgICAgICAgXCJzdHJpbmdNYXBcIjpbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIiAgICA6IFwicHJldi1uZXh0XCIsXG4gICAgICAgICAgICBcInNlYXJjaFwiICA6IFtcInByZXZcIiwgXCJQcmV2XCIsIFwiUFJFVlwiXSxcbiAgICAgICAgICAgIFwicmVwbGFjZVwiIDogW1wibmV4dFwiLCBcIk5leHRcIiwgXCJORVhUXCJdLFxuICAgICAgICAgICAgXCJvcHRpb25zXCIgOiB7XCJpZ25vcmVDYXNlXCI6ZmFsc2V9XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIFwicGx1Z2luc1wiOltcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwidGVzdFwiLFxuICAgICAgICBcImRpcmVjdGl2ZXNcIjp7XG4gICAgICAgICAgXCJjb250cm9sXCI6IHt9LFxuICAgICAgICAgIFwidmFsdWVcIjogW11cbiAgICAgICAgfSxcbiAgICAgICAgXCJwcm9jZXNzb3JzXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJjb250ZW50XCIsXG4gICAgICAgICAgICBcImV4cHJcIjogL2NvbnRlbnQvaW0sXG4gICAgICAgICAgICBcImFjdGlvblwiOiBmdW5jdGlvbiAocHJvcCwgdmFsdWUsIGN4dCkge1xuICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdcIkFcIicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyAncHJvcCc6IHByb3AsICd2YWx1ZSc6ICdcIkFCQ1wiJyB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICdcIkFCQ1wiJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7ICdwcm9wJzogcHJvcCwgJ3ZhbHVlJzogJ1wiQVwiJyB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHsgJ3Byb3AnOiBwcm9wLCAndmFsdWUnOiB2YWx1ZSB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXVxufSovXG5kaXY6YmVmb3JlIHsgY29udGVudDogXCJBXCI7fSBkaXY6YWZ0ZXIgeyBjb250ZW50OiBcIkFCQ1wiO31cblxuLmRlbW8tcHJldiwgLmRlbW8tUHJldiwgLmRlbW8tUFJFViB7IGNvbnRlbnQ6ICdwJzsgfVxuLmRlbW8tbmV4dCwgLmRlbW8tTmV4dCwgLmRlbW8tTkVYVCB7IGNvbnRlbnQ6ICduJzsgfVxuXG4vKnJ0bDplbmQ6Y29uZmlnKi9cblxuLyohcnRsOmJlZ2luOnJlbW92ZSovXG5AaW1wb3J0IHVybCgvdGVzdC5jc3MpO1xuaSB7XG4gIGNvbG9yOiBibHVlOyAgXG59XG4vKnJ0bDplbmQ6cmVtb3ZlKi9cblxuXG5kaXYge1xuICAvKnJ0bDpyZW1vdmUqL1xuICBkaXJlY3Rpb246IHJ0bDtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gIHBhZGRpbmc6IDEwcHg7XG59XG5cbi8qcnRsOmJlZ2luOmlnbm9yZSovXG4uc2FtcGxlIHtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xufVxuLypydGw6ZW5kOmlnbm9yZSovXG5cblxuLypydGw6YmVnaW46b3B0aW9uczp7XCJhdXRvUmVuYW1lXCI6ZmFsc2UsIFwiY2xlYW5cIjogZmFsc2V9Ki9cbi5yaWdodCB7IGRpc3BsYXk6aW5saW5lO31cbi8qcnRsOmJlZ2luOm9wdGlvbnM6e1wiYXV0b1JlbmFtZVwiOnRydWUsIFwiZ3JlZWR5XCI6IHRydWV9Ki9cbi5icmlnaHQgeyBkaXNwbGF5OmlubGluZTt9XG4vKnJ0bDplbmQ6b3B0aW9ucyovXG4uYnJpZ2h0ZXIgeyBkaXNwbGF5OmlubGluZTt9XG4vKnJ0bDplbmQ6b3B0aW9ucyovXG5cbi8qIGF1dG8gcmVuYW1lIG9ubHkgaWYgYSBwYWlyIGV4aXN0cyAqL1xuXG4vKnJ0bDpiZWdpbjpvcHRpb25zOntcImF1dG9SZW5hbWVcIjp0cnVlLCBcImF1dG9SZW5hbWVTdHJpY3RcIjogdHJ1ZX0qL1xuXG4vKiBUaGUgZm9sbG93aW5nIHNob3VsZCBub3QgYmUgcmVuYW1lZCAqL1xuLmx0cnsgZGlzcGxheTogaW5saW5lLWZsZXg7fVxuXG4vKiBCdXQgdGhlc2Ugc2hvdWxkICovXG4ucmlnaHR7IGRpc3BsYXk6IGlubGluZS1mbGV4O31cbi5sZWZ0IHsgZGlzcGxheTogYmxvY2s7fVxuXG4vKnJ0bDplbmQ6b3B0aW9ucyovIl19 */